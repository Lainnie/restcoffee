// Generated by CoffeeScript 1.6.2
(function() {
  var routeMvc;

  module.exports = function(app) {
    var checkAuth;

    checkAuth = function(req, res, next) {
      if (!req.session.authorized) {
        res.statusCode = 401;
        return res.render('401', 401);
      } else {
        return next();
      }
    };
    app.all('/private', checkAuth, function(req, res, next) {
      return routeMvc('private', 'index', req, res, next);
    });
    app.get('/:controller', function(req, res, next) {
      return routeMvc(req.params.controller, 'index', req, res, next);
    });
    app.get('/:controller/:id', function(req, res, next) {
      return routeMvc(req.params.controller, 'get', req, res, next);
    });
    app.post('/:controller', function(req, res, next) {
      return routeMvc(req.params.controller, 'create', req, res, next);
    });
    app.put('/:controller/:id', function(req, res, next) {
      return routeMvc(req.params.controller, 'update', req, res, next);
    });
    app.del('/:controller/:id', function(req, res, next) {
      return routeMvc(req.params.controller, 'delete', req, res, next);
    });
    return app.all('/*', function(req, res) {
      console.warn("error 404: ", req.url);
      res.statusCode = 404;
      return res.render('404', 404);
    });
  };

  routeMvc = function(controllerName, methodName, req, res, next) {
    var actionMethod, controller, data, e;

    if (controllerName == null) {
      controllerName = 'index';
    }
    controller = null;
    try {
      controller = require("./controllers/" + controllerName);
    } catch (_error) {
      e = _error;
      console.warn("controller not found: " + controllerName, e);
      next();
      return;
    }
    data = null;
    if (typeof controller[methodName] === 'function') {
      actionMethod = controller[methodName].bind(controller);
      return actionMethod(req, res, next);
    } else {
      console.warn('method not found: ' + methodName);
      return next();
    }
  };

}).call(this);
